User Interface: de dois em dois segundos:
    [x] envia planta para o BMS - Inês
    [] pede informações aos ocupantes (preference list)* - Dani
    [] mudar a função de update position para aceitar lista de preferências -> retorna novas posiçẽos para cada pessoa e atualiza a posição

Occupant Agent:
    [x] retornar possible moves para cada pessoa (tendo em conta a mobilidade da pessoa)*
        [] alterar para tentar ver melhor pos sabendo q quere estar o mais longe do fogo e o mais perto da saida
        se o melhor moove é ficar auieto aceita todos os poss_moves(ficar mais distante da saida) e com probs mover-se 
        aleatóriamente para locais diferentes
    [] lifebar reduction in LifeBar
    [] se a pessoa se move para stairs, automaticamente muda de floor
    [] se a pessoa se move para a saída, automaticamente sai do building
    [] mudança de andar
    [] atualizar andar em environmente

BMS:
    [] enviar mensagem a cada ocupante com novas informações recebidas sobre portas, incêndio, etc
    [] close doors
    [] definition of emergency state of floor
        se <10%             -> safe
        se >= 10%           -> danger low
        se >= 45%           -> danger high
        se >= 87% em chamas -> give up  (ver se vale a pena dar save pela janela, 
                                        só o fazer se area >= 81,
                                        ou occ está "protegido por obstáculos")
        -Dani
    []def duable(self, initial_pos, destination)-> Boolean
        -Dani
    [] initial deploit of ER per floor
        for all floors lower that give up
        see nº of occ in floor 

DEC:
    []para consumir obstáculos/portas demora 6 seg (mudar tempo talvez?)
    []não consegue atingir escadas(assume q são com sistema à prova de fogo)
        se houver tempo definir escadas com flag(flamable) se true fogo pode atingir se não não
    [x]smoke - Inês
    [x]casual fire propagation - Inês

BMS has information -> ocupante recebe information -> ocupante faz lista de possible moves lista de preferências -> ocupante envia lista de preferências para o ambiente -> ambiente atualiza (ciclo recomeça)

[x] sincronizar o inicio dos agentes - Inês
[] em ui, na função demand_list, occupant agent não está a ser devidamente identificado - Dani


TO DO:
[] smoke only appears if there's fire - Inês
[] pôr a funcionar savethroughwindow - Inês - not working
[] chamar  mais er agents conforme necessário - Constança
[x] floor alocado ao er_agent
-----

----------------------------------------------------------------------------------------------------------------------------------------------
Behaviours:

- ER Agents:
    na rota de salvamento paramedicos entagnam o estádo de doença de occ(não sofrem mais dano)
    e firefighters levam os doentes   (quando não há mais doentes para estagnar, dependendo do estado do resto eles podem levar doentes)

    n-> nº de pacientes total
    ner-> nº de ER(em questão) total
    capacidade "aceitável" por ER   
    -> paramédicos     type:1     n/ner <=7.5      
    -> ff              type:2     n/ner <=5.5
    -> so              type:3     n/ner <=45.7       nº de pessoas por individuo
    enquanto os níveis forem estes não é necessário pedir ajuda

    [x] GoToFloot(OneShot) -> receive instructions from BMS
    [] CheckForUnabledPeople(cyclic) -> num dado floor
    [] ReceiveHealthCheck(Cyclic) -> msg from occupants
                                    o primeiro ER a chegar ao piso vai continuamente receber info
                                    dado por BMS?
                                    Talvez criar um lider do andar entre os ER
                                        ->typr(n, lider Bool)
                                    "vê" quem necessita de ajuda 
                                    "vê" quem são os ER do piso 
                                    diz a qual ER o q fazer(lista de pessoas para socorrer)

                                    lideres podem comunicar entre floor e BMS
                                    se um andar necessitar de mais ajuda 
                                    lider avisa BMS
                                    se houver mais ER do q feridos 
                                    lider avisa BMS

    se durante o salvamente alguém for mandado para outro andar a lista de occ para salvar é 
    automáticamente distribuida por todos os ER desse tipo q estão nesse andar

    [] Get_path(initial_pos, target) -  usado para ir para o floor
                                        usado para ir ter com occ
                                        usado para sair do edifício

    [] AbortMission(OneShot) -> se toda a gente salva ou se não der para salvar mais(determinada por BMS)
                             
    [] GetCrue -> see how else with get comerads
        destribut per crue -> dar a outros agents uma lista de pessoas para ajudar no piso 
        triagem -> ordenar por importância

    [x] GoToBuilding(OneShot) 

    [] GetOcc -> cada ER é responsável de apanhar um occ, ver caminho, guarda id

    [x?] AbductionOfOcc -> apanha um occupante para o poder levar para segurânca
        deve ser usada ou quando chaga a uma saída ou 
        se occ tiver health == 1 larga-no no sítio mais seguro mais proximo(mandá-lo para o sítio mais prox e livre)

    [] SaveThroughWindow(Cyclic) -> if health == 0 and no exits or stairs

                                    Talvez altere
                                    nandom ER mantêm-se fora, e é com ele que comunica o ER que quer usar a janela
                                    insideB(type: Bool)

    [] PutOutFire(OneShot) -> só no fim porque fumos tóxicos

- Occupants:
    [x] Receivewarnings(OneShot) -> msg from BMS
    [x] EvacuateBehaviour(Cyclic) -> find exits / stairs, probably receive msg from BMS
    [x] CheckHealth(Cyclic) -> recebe pedido from ER and send msg to ER
    [] LeaveFloor(OneShot) - Dani - não é Behaviour, é função do EvacuateBehaviour

- BMS:
    [x] SendWarnings(OneShot) -> send msg to occupants no início
    [x] ReceivePlan(Cyclic) -> a planta do edificio é atualizada a cada 2 segundos
    [x] CallER(OneShot) -> send msg to er agents no início
    [] HelpWithOccupantRoute(Cyclic) -> send msg to occupants telling them where to go - Inês
    recebo lista de listas com as posições desejadas -> para cada ocupante, vejo se poode ir para essa posição (usando uma cópia do environment)
    [x] SendERToFloor(OneShot) -> send msg to ER agents

----------------------------------------------------------------------------------------------------------------------------------------------
D
agentes
    ocupantes(do prédio)
    emergency responders
    building managment systems (the eyes, info passes throu them)
ambiente
    building
    combination of floors
    per floor
    ->exit of floor
    ->doors
    ->windows
    states ->destroided, safe, unknown?, risky

decentralized system

 where agents autonomously handle different aspects of
 evacuation,
 ->guiding occupants,
 ->managing exits,
 ->coordinating emergency responders.


need help
OCCUPANT
    ->comunicate with:
        ER, ENV(partial environment)
    ->location(in environment)
    ->mobility(able-bodied, disabled[0,1])
                            0->can't use stars
                            1->cant use stars
    ->destination??
    ->They make decisions on how to
    navigate to the nearest exit based on real-time information
    ->act individually, do not comunicate unleass with hellpers
    ->they update environmet when ->succesfully exited danger
                                  ->interact with hellper
    ->only goal, find clossest exit


hellpers
EMERGENCY RESPONDERS
    ->comunicate with:
        BMS,O, ENV(partial environment)
    ->nº of eache sub class
    ->formulation of groups(no single unit if poss, all groups >=1 paramedic)
    ->hive mind of
        ->firefighters
            ->location, spetial function
        ->paramedics
        ->security officers
        ...
        (classes of a class)
        ->act as unit, all posses the same info of environment

BUILDING MANAGEMENT SYSTEM (BMS)
    ->comunicate with:
        ER
    ->update environment(real time)
    ->controll partially environment
    ->loock doors to prevent fire
    ->little info on OCCUPANT location/state


environment changer
DYNAMIC EMERGENCY CONDITIONS
    ->comunicate with:
        ENVIRONMENT
    ->alters the state of environment(fires spreading, structural damage, or blocked exits)



ENVIRONMENT
    ->nº of floors
    ->general entries/exists
    ->plant of floor
        ->transfer points(elevadores, portas, escadas, janelas)~
            ->janelas são caso especial -andar 0(portas)
                                        -se andar blokeado usadas como portas

        ->danger lev per block
            ->0-not affected
            ->1-smook, blocks disabled, able_body move as disabled
            ->2-can only pass if with firefighters
            ->3-can only pass firefighters
            ->4-dead zone completly blocked

        ->nº of individuals(occupant density, location of each)


COORDINATION AND COMMUNICATION
EVACUATION STRATEGIES
PERFORMANCE METRICS

 -> 